Concept Communally_Bounded_List_Template( type Entry; eval Initial_Capacity: Integer );
	uses String_Theory, Integer_Ext_Theory;
	requires Initial_Capacity > 0;
	
	(* Note: Under Construction! *)
	
	Var Remaining_Cap: N;

	Facility_Initialization
		ensures Remaining_Cap = Initial_Capacity;

	Type Family List is modeled by Cart_Prod
			Prec, Rem: Str(Entry);
		end;
		exemplar P;
		initialization
			ensures P.Prec = Empty_String and P.Rem = Empty_String;
		finalization
			updates Remaining_Cap;
			ensures Remaining_Cap = #Remaining_Cap + |P.Prec o P.Rem|;
	end;

	Oper Advance( upd P: List );
		requires P.Rem /= Empty_String;
		ensures P.Prec = #P.Prec o Prt_Btwn(0, 1, #P.Rem) and
				P.Rem = Prt_Btwn(1, |#P.Rem|, #P.Rem);
	
	Oper Reset( updates P: List );
		ensures P.Prec = Empty_String and P.Rem = #P.Prec o #P.Rem;
	
	Oper Length_of_Rem( restores P: List ): Integer;
		ensures Length_of_Rem = ( |P.Rem| );

	Oper Insert( clears New_Entry: Entry; updates P: List );
		updates Remaining_Cap;
		requires Remaining_Cap > 0;
		ensures P.Prec = #P.Prec and P.Rem = <#New_Entry> o #P.Rem and
				Remaining_Cap = #Remaining_Cap - 1;

	Oper Rmng_Capacity(): Integer;
		ensures Rmng_Capacity = ( Remaining_Cap );

	Oper Remove( replaces Entry_Removed: Entry; updates P: List );
		updates Remaining_Cap;
		requires P.Rem /= Empty_String;
		ensures P.Prec = #P.Prec and
				Entry_Removed = DeString(Prt_Btwn(0, 1, #P.Rem)) and
				P.Rem =  Prt_Btwn(1, |#P.Rem|, #P.Rem) and
				Remaining_Cap = #Remaining_Cap + 1;

	Oper Advance_to_End( updates P: List );
		ensures P.Prec = #P.Prec o #P.Rem and P.Rem = Empty_String;

	Oper Swap_Remainders( updates P, Q: List );
		ensures P.Prec = #P.Prec and Q.Prec = #Q.Prec and 
				P.Rem = #Q.Rem and Q.Rem = #P.Rem;

	Oper Length_of_Prec( restores P: List ): Integer;
		ensures Length_of_Prec = |P.Prec|;

	Oper Clear( clears P: List );
		updates Remaining_Cap;
		ensures Remaining_Cap = #Remaining_Cap + |#P.Prec| + |#P.Rem|;

end Communally_Bounded_List_Template;